version: '3.8'

services:
  postgres:
    image: postgres:16.1-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.postgres.rule=Host(`postgres.musically.localhost`)
      - traefik.http.services.postgres.loadbalancer.server.port=5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME" ]
      interval: 10s
      timeout: 5s
      retries: 3

  adminer:
    image: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: hydra
    ports:
      - '8081:8080'
    labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.rule=Host(`adminer.musically.localhost`)
      - traefik.http.services.adminer.loadbalancer.server.port=8080

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: dev
    restart: always
    ports:
      - '8080:8080'
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.musically.localhost`)
      - traefik.http.services.api.loadbalancer.server.port=8080
    volumes:
      - ./src:/app/src
      - ./pom.xml:/app/pom.xml
      - ./target:/app/target
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 20s
      retries: 3

volumes:
  db: